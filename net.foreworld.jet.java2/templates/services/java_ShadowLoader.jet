package net.foreworld.java.services;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLDecoder;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;

/**
 * Copyright(c) 2010 foreworld.net
 * 
 * @author huangxin (huangxin@foreworld.net)
 * @generated
 */
public class ShadowLoader extends URLClassLoader {

	private Cipher _cipher;

	public Cipher getCipher() {
		return _cipher;
	}

	public void setCipher(Cipher $cipher) {
		this._cipher = $cipher;
	}

	private String _filePath;

	public String getFilePath() {
		return _filePath;
	}

	public void setFilePath() throws UnsupportedEncodingException {
		_filePath = URLDecoder.decode(getClass().getProtectionDomain().getCodeSource().getLocation().getFile(), "UTF-8");
		_filePath = _filePath.substring(1, _filePath.length());
	}

	private String _secretPath;

	public String getSecretPath() {
		return _secretPath;
	}

	public void setSecretPath() {
		_secretPath = _filePath.replace(getClass().getSimpleName(), "Secret");
	}

	private byte[] getSafelight() throws IOException {
		return Util.readFile(_secretPath);
	}

	private boolean _deploy;

	private boolean isDeploy() {
		return _deploy;
	}

	private void setDeploy() {
		_deploy = "r".equals(_filePath.substring(_filePath.length() - 1));
	}

	private String _rootPath;

	public String getRootPath() {
		return _rootPath;
	}

	public void setRootPath() {
		if (!isDeploy()) {
			_rootPath = _filePath.substring(0, _filePath.indexOf("classes") + 7);
		}
	}

	private JarFile _jarFile;

	public JarFile getJarFile() {
		return _jarFile;
	}

	public void setJarFile() throws IOException {
		_jarFile = new JarFile(_filePath);
	}

	public ShadowLoader() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, InvalidKeySpecException {
		super(new URL[] { null }, Thread.currentThread().getContextClassLoader());
		setFilePath();
		setSecretPath();
		setDeploy();
		setRootPath();
		byte __safelight[] = null;

		if (isDeploy()) {
			setJarFile();
			JarEntry __entry_3 = getJarFile().getJarEntry("net/foreworld/java/services/Secret.class");
			long __len_3 = __entry_3.getSize();
			byte __data_3[] = new byte[(int) __len_3];
			InputStream __is_3 = getJarFile().getInputStream(__entry_3);
			int __r_3 = __is_3.read(__data_3);
			if (__r_3 != __len_3)
				throw new IOException("Only read " + __r_3 + " of " + __len_3 + " for ");
			__is_3.close();
			__safelight = __data_3;
		} else {
			__safelight = getSafelight();
		}

		DESKeySpec __desKey = new DESKeySpec(__safelight);
		SecretKeyFactory __skf = SecretKeyFactory.getInstance("DES");
		SecretKey __sk = __skf.generateSecret(__desKey);
		setCipher(Cipher.getInstance("DES"));
		getCipher().init(Cipher.DECRYPT_MODE, __sk, new SecureRandom());
	}

	public void closeJarFile() throws IOException {
		if (getJarFile() != null)
			getJarFile().close();
	}

	@SuppressWarnings("unchecked")
	public Class loadClass(String $name) throws ClassNotFoundException {
		Class __class = findLoadedClass($name);
		if (__class == null) {
			try {
				__class = getParent().loadClass($name);
			} catch (ClassNotFoundException $ex) {
				$ex.printStackTrace();
			}
			if (__class == null) {
				__class = findClass($name);
			}
		}
		return __class;
	}

	@SuppressWarnings("unchecked")
	public Class loadClass(String $name, boolean $resolve) throws ClassNotFoundException {
		try {
			/* 我们要创建的Class对象 */
			Class __class = null;

			/* 必需的步骤1：如果类已经在系统缓冲之中 我们不必再次装入它 */
			__class = findLoadedClass($name);

			if (__class != null) {
				return __class;
			}

			/* 下面是定制部分 */
			try {

				/* 读取经过加密的类文件 */
				byte __classData_3[] = null;

				if (isDeploy()) {
					JarEntry __entry_3 = getJarFile().getJarEntry($name.replaceAll("\\.", "/") + ".class");
					InputStream __is_3 = getJarFile().getInputStream(__entry_3);
					ByteArrayOutputStream __baos_3 = new ByteArrayOutputStream();
					int __len_3 = 0;
					byte[] __b_3 = new byte[1024];
					while ((__len_3 = __is_3.read(__b_3, 0, __b_3.length)) != -1) {
						__baos_3.write(__b_3, 0, __len_3);
					}
					__classData_3 = __baos_3.toByteArray();
				} else {
					__classData_3 = Util.readFile(getRootPath() + File.separator + $name.replaceAll("\\.", "/") + ".class");
				}

				if (__classData_3 != null) {
					/* 解密 */
					byte __decryptedClassData_4[] = null;
					try {
						__decryptedClassData_4 = getCipher().doFinal(__classData_3);
					} catch (IllegalBlockSizeException $ex) {
						$ex.printStackTrace();
					} catch (BadPaddingException $ex) {
						$ex.printStackTrace();
					}

					/* 再把它转换成一个类 */
					__class = defineClass($name, __decryptedClassData_4, 0, __decryptedClassData_4.length);
				}
			} catch (FileNotFoundException $ex) {
				$ex.printStackTrace();
			}

			/* 我们尝试用默认的ClassLoader装入它 */
			if (__class == null)
				__class = findSystemClass($name);

			/* 如有必要，则装入相关的类 */
			if ($resolve && __class != null)
				resolveClass(__class);

			/* 把类返回给调用者 */
			return __class;
		} catch (IOException $ex) {
			throw new ClassNotFoundException($ex.toString());
		}
	}
}
